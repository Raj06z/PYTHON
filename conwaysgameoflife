import random
import time
import os

def create_grid(rows, cols):
    """Initialize a random grid using lists."""
    return [[random.choice([0, 1]) for _ in range(cols)] for _ in range(rows)]

def print_grid(grid):
    """Display the grid in the console."""
    os.system("clear" if os.name == "posix" else "cls")  # Clear the screen
    for row in grid:
        print(" ".join("■" if cell else " " for cell in row))  # Use ■ for live cells
    print()

def count_neighbors(grid, r, c):
    """Count live neighbors around a cell."""
    rows, cols = len(grid), len(grid[0])
    neighbors = 0
    for i in range(-1, 2):
        for j in range(-1, 2):
            if i == 0 and j == 0: 
                continue
            nr, nc = r + i, c + j
            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1:
                neighbors += 1
    return neighbors

def update_grid(grid):
    """Apply Conway's rules to update the grid."""
    rows, cols = len(grid), len(grid[0])
    new_grid = [[0] * cols for _ in range(rows)]

    for r in range(rows):
        for c in range(cols):
            neighbors = count_neighbors(grid, r, c)

            if grid[r][c] == 1 and (neighbors < 2 or neighbors > 3):
                new_grid[r][c] = 0  
            elif grid[r][c] == 0 and neighbors == 3:
                new_grid[r][c] = 1  
            else:
                new_grid[r][c] = grid[r][c]  
    
    return new_grid

def run_game(rows=10, cols=20, generations=50, interval=0.2):
    """Run the simulation in the console."""
    grid = create_grid(rows, cols)
    
    for _ in range(generations):
        print_grid(grid)
        time.sleep(interval)
        grid = update_grid(grid)


run_game()